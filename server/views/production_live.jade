extends layout
block content
  .row
    .col-md-12
      .col-md-6
        h3 Production Live Dashboard
  .row
    .col-md-12
      .col-md-6
        form#frmPL(action='/dashboard/prod_live',method='POST', enctype='form-data')
          .div.dropdown
                input#datehidden(type="hidden",name="date", value =data.dates[0].WEEK )
                button.btn.dropdown-toggle#btnDate( type="button",data-toggle="dropdown",aria-expanded="true",name="date") #{data.dates[0].WEEK} 
                  b.caret
                ul.dropdown-menu
                  -for(var prop in data.dates)
                    li(class='')
                      a.dateDropdown #{data.dates[prop].WEEK}        
  .row
    .col-md-12
      .card#manualExecVelocity
        .card-header
          h4.card-title Report 
        .row
          .col-md-12
            .col-md-12
              .card
                .card-chart
                    table.table.table-responsive
                      thead
                        tr
                          th 
                          th Test Planned 
                          th Test Executed
                          th No Run
                          th Passed
                          th Failed
                          th Pass %
                          th Fail %
                          th Defects
                        tr
                      tbody
                        - var length = data.testData.length
                        - var testData = data.testData
                        if length>0
                          - var autoPlanned = testData[length-1].TEST_PLANNED
                          - var autoExec = testData[length-1].TEST_EXECUTED
                          - var noRun1 = testData[length-1].NO_RUN
                          - var autoPassed = testData[length-1].PASS
                          - var autoFailed = testData[length-1].FAIL
                          - var autoTotal = autoPassed+ autoFailed
                          - var testType1 = testData[length-1].TEST_TYPE
                          - var def1 = testData[length-1].DEFECTS
                          tr
                            td !{testType1}
                            td !{autoPlanned}
                            td !{autoExec}
                            td !{noRun1}
                            td !{autoPassed}
                            td !{autoFailed}
                            td !{Math.floor((autoPassed/autoTotal)*100)}
                            td !{Math.floor((autoFailed/autoTotal)*100)}
                            td !{def1}
                        
                        if length>1
                          - var manPlanned = testData[length-2].TEST_PLANNED
                          - var manExec = testData[length-2].TEST_EXECUTED
                          - var noRun2 = testData[length-2].NO_RUN
                          - var manPassed = testData[length-2].PASS
                          - var manFailed = testData[length-2].FAIL
                          - var manTotal = manPassed+ manFailed
                          - var def2 = testData[length-2].DEFECTS 
                          - var testType2 = testData[length-2].TEST_TYPE
                          tr
                            td !{testType2}
                            td !{manPlanned}
                            td !{manExec}
                            td !{noRun2}
                            td !{manPassed}
                            td !{manFailed}
                            td !{Math.floor((manPassed/manTotal)*100)}
                            td !{Math.floor((manFailed/manTotal)*100)}
                            td !{def2}

                          -var totalPassed = autoPassed + manPassed
                          -var totalFailed = autoFailed + manFailed
                          -var totalTotal = totalPassed + totalFailed
                          tr
                            td Total
                            td !{autoPlanned + manPlanned}
                            td !{autoExec + manExec}
                            td !{noRun1+noRun2}
                            td !{totalPassed}
                            td !{totalFailed}
                            td !{Math.floor((totalPassed/totalTotal)*100)}
                            td !{Math.floor((totalFailed/totalTotal)*100)}
                            td !{parseInt(def1)+parseInt(def2)}
        //.row
          .col-md-12
            .col-md-12
              .card
                h4.card-title Burn Down Chart
                .ct-chart#burndownBar(style='height:300px')
        - var status = {"NOT STARTED":"RED","IN PROGRESS":"YELLOW","COMPLETED":"GREEN"}
        .row
          .col-md-12
            - var productData = data.productData
              .col-md-6
                .card
                  h4.card-title Migration Summary
                  .card-chart
                      table.table.table-responsive
                        thead
                          tr
                            th Product
                            th Version
                        tbody
                          -for(var i in productData)
                            - var entry = productData[i]
                            tr
                              td !{entry.PRODUCT}
                              td(bgcolor = status[entry.STATUS]) !{entry.VERSION}
            - var categoryData = data.categoryData
              .col-md-6
                .card
                    h4.card-title Testing Categories
                    .card-chart
                      .ct-chart
                        table.table.table-responsive
                          thead
                            tr
                              th Category
                              th Method
                          tbody
                            -for(var i in categoryData)
                              - var entry = categoryData[i]
                              tr
                                td !{entry.CATEGORY}
                                td(bgcolor = status[entry.STATUS]) !{entry.METHOD}

  
  .row
    .col-md-12
      .card#manualExecVelocity
        .card-header
          h4.card-title Issues Report
        .row
          .col-md-12
            .col-md-12
              .card
                .card-chart
                    table.table.table-responsive
                      thead
                        tr
                          th Category
                          th Severity
                          th Issue Description
                          th Remedition Plan
                      tbody
                        - var lengthI = data.issuesData.length
                        if lengthI>0
                          -for(var i in data.issuesData)
                            - var entry = data.issuesData[i]
                            tr
                              td !{entry.CATEGORY}
                              td !{entry.SEVERITY}
                              td !{entry.ISSUE_DESCRIPTION}
                              td !{entry.WORKAROUND}
                                

  .row(style="display:none")
    .col-md-12
      .card#BugDBReports
        .card-header
          h4.card-title BugDB Reports 
        .row
          .col-md-12
            .col-md-12
              .card
                h4.card-title Open Defects
                .ct-chart#productDefectsBar(style='height:300px')
              

  script(type='text/javascript', src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js')
  script(type='text/javascript', src='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/jquery-ui.min.js')
  
  script.
    var responseData = !{JSON.stringify(data)};
    var data = responseData;
    
  script(src='/js/echarts.min.js')
  script(type='text/javascript').

  script(src='/js/echarts.min.js')
  script(type='text/javascript').

    function calculatePercentage(numArray){
      const arrSum = arr => arr.reduce((a,b) => a + b, 0);

      var total = arrSum(numArray);
      var perc = [];
      numArray.forEach(function(item){
        perc.push(Math.round((item/total *100)));
      })
        
      
      return perc;
    }
    function setShadowBar(chart,xaxisData,dataShadow,data){
      option = {
          title: {
              
          },
          xAxis: {
              data: xaxisData,
              axisLabel: {
                  inside: true,
                  verticalAlign:'center',
                  rotate:90,
                  textStyle: {
                      color: '#fff'
                  },
              },
              axisTick: {
                  show: false
              },
              axisLine: {
                  show: false
              },
              z: 10
          },
          yAxis: {
              axisLine: {
                  show: false
              },
              axisTick: {
                  show: false
              },
              axisLabel: {
                  textStyle: {
                      color: '#999'
                  }
              }
          },
          /*
          dataZoom: [
              {
                  type: 'inside'
              }
          ],
          */
          series: [
              { // For shadow
                  type: 'bar',
                  itemStyle: {
                      normal: {color: 'rgba(0,0,0,0.05)'}
                  },
                  barGap:'-100%',
                  barCategoryGap:'40%',
                  data: dataShadow,
                  animation: true
              },
              {
                  type: 'bar',
                  label: {
                    normal: {
                        show: true,
                        position: 'bottom'
                    }
                  },
                  itemStyle: {
                      normal: {
                          color: new echarts.graphic.LinearGradient(
                              0, 0, 0, 1,
                              [
                                  {offset: 0, color: '#83bff6'},
                                  {offset: 0.5, color: '#188df0'},
                                  {offset: 1, color: '#188df0'}
                              ]
                          )
                      },
                      emphasis: {
                          color: new echarts.graphic.LinearGradient(
                              0, 0, 0, 1,
                              [
                                  {offset: 0, color: '#2378f7'},
                                  {offset: 0.7, color: '#2378f7'},
                                  {offset: 1, color: '#83bff6'}
                              ]
                          )
                      }
                  },
                  data: data
              }
          ]
      };
      chart.setOption(option);
    }

    function setBarChartOption(chart,legendData,seriesData,xaxisData,barColor){
      
      var option = {
          color: barColor,
          tooltip: {
              trigger: 'axis',
              axisPointer: {
                  type: 'shadow'
              }
          },
          legend: {
              data: legendData
          },
          toolbox: {
              show: false,
              orient: 'vertical',
              left: 'right',
              top: 'center',
              feature: {
                  mark: {show: true},
                  dataView: {show: true, readOnly: false},
                  magicType: {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore: {show: true},
                  saveAsImage: {show: true}
              }
          },
          calculable: true,
          xAxis: [
              {
                  type: 'category',
                  axisTick: {show: false},
                  //data: ['Desktop1', 'Desktop2', 'Desktop3', 'Desktop4', 'Desktop5']
                  data :xaxisData,
                  axisLabel:{rotate:30,fontSize:10},
                  height:80
                }

                  //data : labels            }
          ],
          yAxis: [
              {
                  type: 'value'
              }
          ],
          series:seriesData
        };
      chart.setOption(option);
    }

    //function to set pie chart option

    function setPieChartOptions(pieChart,legendData, seriesName,seriesData,seriesColor,formatter,radius,labelPosition){
      pieOption = {
        title : {
          
            //text: seriesName,
            //subtext: date,
            //x:'center'
        },
        tooltip : {
           trigger: 'item',
           formatter: formatter
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            data: legendData
        },
        series : [
            {
                name: seriesName,
                type: 'pie',          
                radius : radius,
                label: {
                  formatter:formatter,
                    position: labelPosition
                },
                labelLine: {
                normal: {
                    show: true
                }
            },
                center: ['50%','50%'],
                data:seriesData,
                color:seriesColor,
                itemStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
      };

      pieChart.setOption(pieOption);
    }
    //

    var config = {
        rotate: 90,
        align: 'center',
        verticalAlign: 'middle',
        position: 'top',
        distance: 15,
    };

    var formatter = "{c}";
    var labelOption = {
        normal: {
            show: true,
            position: config.position,
            distance: config.distance,
            align: config.align,
            verticalAlign: config.verticalAlign,
            //horizontalAlign: config.horizontalAlign
            //rotate: config.rotate,
            formatter: formatter,
            fontSize: 12,
            //fontColor: 'black',
            rich: {
                name: {
                    color: '#fff'
                }
            }
        }
    };

    
    
    //product defects
    /*
    var productDefectsBar = echarts.init(document.getElementById('productDefectsBar'));
    var BPD=data.bugProductData;
    var xaxisDataBPD=[];
    var seriesDataBPD=[];
    var dataBPD=[];
    
    for(var i=0;i<BPD.length;i++){
      var entry=BPD[i];
      //legendData.push(entry.functionality);
      xaxisDataBPD.push(entry.ALIAS);
        dataBPD.push(entry.DEFECTS);
      }
    var yMaxBPD = 12;
    var dataShadowBPD = [];

    for (var i = 0; i < dataBPD.length; i++) {
        dataShadowBPD.push(yMaxBPD);
    }
    setShadowBar(productDefectsBar,xaxisDataBPD,dataShadowBPD,dataBPD);
    */
    /*
    // burn down chart
    var burndownBarChart=echarts.init(document.getElementById('burndownBar'));
    var passData = [];
    var failData = [];
    var totalData = [];
    var weeks = [];
    var manualData=responseData.manualData;
    if(manualData.length==0){
      $("#execVelocity").hide();
    }

    for(var i=0;i<manualData.length;i++){
      var entry=manualData[i];
      passData.push(entry.PASSED);
      failData.push(entry.FAILED);
      totalData.push(entry.TEST_EXECUTED);
      weeks.push('W'+(i+1));
      
    }
    var legendData=['Pass', 'Fail','Total'];
    
    var labelOption = {
        normal: {
            show: true,
            position: config.position,
            distance: config.distance,
            align: config.align,
            verticalAlign: config.verticalAlign,
            //horizontalAlign: config.horizontalAlign
            //rotate: config.rotate,
            formatter: "{c}",
            fontSize: 12,
            //fontColor: 'black',
            rich: {
                name: {
                    color: '#fff'
                }
            }
        }
    };
    
    var seriesData= [
              {
                  name: 'Pass',
                  type: 'bar',
                  barGap: 0,
                  label: labelOption,
                  //data: [320, 332, 301, 334, 390]
                  data: passData
              },
              {
                  name: 'Fail',
                  type: 'bar',
                  label: labelOption,
                  //data: [220, 182, 191, 234, 290]
                  data: failData
              },
              {
                  name: 'Total',
                  type: 'bar',
                  label: labelOption,
                  //data: [220, 182, 191, 234, 290]
                  data: totalData
              }

          ];
    var barColor = ['green','#e73d3a','#0c84eb'];
    setBarChartOption(burndownBarChart,legendData,seriesData,weeks,barColor);
    */


    $('.dateDropdown').click(function() {
      console.log('clicked');
      console.log($('#btnDate').text());
      var date=$(this).text().trim();
      //console.log(env);
      $('#btnDate').text($(this).text());
      $('#datehidden').val(date);
      $('#frmPL').submit();
      
    });

    $('.btnEdit').click(function(e){
      var btnText = $(this).text().trim();
      var btn = $(this);
      var ul = $(this).parent().parent().find('ul');
      var txtArea = $(this).parent().parent().find('textarea');
      var formdiv = $(txtArea).closest('div');
      var loader = $(this).parent().parent().parent().find('.cover-spin');
      var name = $(txtArea).attr('name');
       console.log('name:'+name );
      console.log('formdiv:'+JSON.stringify(formdiv) );
      console.log('Loader:'+JSON.stringify(loader) );
      if(btnText=='Edit')
      {
        $(this).text("Update");
        //$('#notesList').hide();
        $(ul).hide();

        //var list = document.getElementById('notesList').childNodes;
        var list = $(ul).children();
        var notesArray = '';
        for(var i=0;i < list.length; i++) {
            var arrValue = list[i].innerHTML.trim();
            //alert(arrValue);
            arrValue=arrValue||'';
            notesArray+=arrValue;
            notesArray+='\n';
        }
        $(txtArea).val(notesArray);
        $(formdiv).fadeIn();

      }else if(btnText=='Update'){
        var notes = $(txtArea).val();
        $(formdiv).hide();
        //$('#notesLoader').fadeIn();
        $(loader).fadeIn();
        var notes = notes.split('\n');
        var list="";
        notes.forEach(function(value,index,array){
          if(value!='')
            list=list+"<li>"+value+"</li>"
        })
         console.log("update:"+list);
        e.preventDefault();
        
        
        $.ajax({
          //url: 'http://localhost:3000/notes',
          url: 'http://msp52458.us.oracle.com:3000/notes',
          type: 'POST',
          crossDomain: true,
          dataType: 'json',
          data:JSON.stringify( {'name' :name,'content':list}),
          contentType: 'application/json',
          success: function(data) {
              console.log("AJAx:"+data);
              if(data.success=='true'){
                $(btn).text("Edit");
                $(ul).html(list);
                
                $(ul).fadeIn();
                $(loader).hide();
              }
              
          },
          error: function(data) {
              console.log("AJAxerrr:"+data);
          }
        });
        
      }
      
    });

    $('#btnMigration').click(function(e){
      e.preventDefault();
      var env = $('#environment').val();
      var prod = $('#product').val();
      var date = $('#date').val();
      var version = $('#version').val();
      var comm = $('#comments').val();
      
       console.log(env+':'+prod+':'+date+':'+version+':'+comm);
       
        $.ajax({
          //url: 'http://localhost:3000/migrations',
          url: 'http://msp52458.us.oracle.com:3000/migrations',
          type: 'POST',
          crossDomain: true,
          dataType: 'json',
          data:JSON.stringify( {'environment' :env,'product':prod,mDate:date,version:version,comments:comm}),
          contentType: 'application/json',
          success: function(data) {
              console.log("AJAx:"+data);
              if(data.success=='true'){
                $(btn).text("Edit");
                $(ul).html(list);
                
                $(ul).fadeIn();
                $(loader).hide();
              }
              
          },
          error: function(data) {
              console.log("AJAxerrr:"+data);
          }
        });
        
    
      
    });

    

    //$('#tableScriptDelivery').hide();
    //$('#monthwiseExceVelocity').hide();


    
    //$('#graphScriptDelivery').hide();






    